
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIV ELSE FLOAT GT IDENTIFIER IF INT INT_LITERAL LBRACE LPAREN LT MINUS MUL PLUS RBRACE RPAREN SEMIif_statement : IF LPAREN expression RPAREN LBRACE statement_list RBRACEstatement_list : statement statement_list\n                      | statementstatement : IDENTIFIER ASSIGN expression SEMI\n                 | IDENTIFIER assignment_operators SEMI\n                 | type IDENTIFIER SEMI\n                 | self_assignment_expression SEMIexpression : INT_LITERAL\n                  | IDENTIFIER operator INT_LITERAL\n                  | IDENTIFIER conditional_operators INT_LITERAL\n                  | self_assignment_expressionoperator : PLUS\n                | MINUS\n                | DIV\n                | MULconditional_operators : LT\n                            | GT\n                            | ASSIGN ASSIGN\n                            | LT ASSIGN\n                            | GT ASSIGNself_assignment_expression : IDENTIFIER inc_dec_operators\n                                 | IDENTIFIER assignment_operators INT_LITERALinc_dec_operators : PLUS PLUS\n                        | MINUS MINUSassignment_operators : PLUS ASSIGN\n                           | MINUS ASSIGN\n                           | DIV ASSIGN\n                           | MUL ASSIGNtype : INT\n            | FLOAT'
    
_lr_action_items = {'IF':([0,],[2,]),'$end':([1,40,],[0,-1,]),'LPAREN':([2,],[3,]),'INT_LITERAL':([3,9,10,12,13,14,15,16,17,18,25,27,28,29,30,31,32,42,43,],[5,21,22,23,-12,-13,-14,-15,-16,-17,-25,-26,-27,-28,-19,-20,-18,5,23,]),'IDENTIFIER':([3,20,34,36,38,39,42,49,51,52,53,],[6,35,35,48,-29,-30,6,-7,-5,-6,-4,]),'RPAREN':([4,5,7,11,21,22,23,24,26,],[8,-8,-11,-21,-9,-10,-22,-23,-24,]),'SEMI':([5,7,11,21,22,23,24,25,26,27,28,29,37,43,48,50,],[-8,-11,-21,-9,-10,-22,-23,-25,-24,-26,-27,-28,49,51,52,53,]),'PLUS':([6,13,35,44,],[13,24,44,24,]),'MINUS':([6,14,35,45,],[14,26,45,26,]),'DIV':([6,35,],[15,46,]),'MUL':([6,35,],[16,47,]),'LT':([6,],[17,]),'GT':([6,],[18,]),'ASSIGN':([6,13,14,15,16,17,18,19,35,44,45,46,47,],[19,25,27,28,29,30,31,32,42,25,27,28,29,]),'LBRACE':([8,],[20,]),'INT':([20,34,49,51,52,53,],[38,38,-7,-5,-6,-4,]),'FLOAT':([20,34,49,51,52,53,],[39,39,-7,-5,-6,-4,]),'RBRACE':([33,34,41,49,51,52,53,],[40,-3,-2,-7,-5,-6,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'if_statement':([0,],[1,]),'expression':([3,42,],[4,50,]),'self_assignment_expression':([3,20,34,42,],[7,37,37,7,]),'operator':([6,],[9,]),'conditional_operators':([6,],[10,]),'inc_dec_operators':([6,35,],[11,11,]),'assignment_operators':([6,35,],[12,43,]),'statement_list':([20,34,],[33,41,]),'statement':([20,34,],[34,34,]),'type':([20,34,],[36,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> if_statement","S'",1,None,None,None),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE','if_statement',7,'p_if_statement','if.py',50),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','if.py',54),
  ('statement_list -> statement','statement_list',1,'p_statement_list','if.py',55),
  ('statement -> IDENTIFIER ASSIGN expression SEMI','statement',4,'p_statement','if.py',58),
  ('statement -> IDENTIFIER assignment_operators SEMI','statement',3,'p_statement','if.py',59),
  ('statement -> type IDENTIFIER SEMI','statement',3,'p_statement','if.py',60),
  ('statement -> self_assignment_expression SEMI','statement',2,'p_statement','if.py',61),
  ('expression -> INT_LITERAL','expression',1,'p_expression','if.py',64),
  ('expression -> IDENTIFIER operator INT_LITERAL','expression',3,'p_expression','if.py',65),
  ('expression -> IDENTIFIER conditional_operators INT_LITERAL','expression',3,'p_expression','if.py',66),
  ('expression -> self_assignment_expression','expression',1,'p_expression','if.py',67),
  ('operator -> PLUS','operator',1,'p_operator','if.py',70),
  ('operator -> MINUS','operator',1,'p_operator','if.py',71),
  ('operator -> DIV','operator',1,'p_operator','if.py',72),
  ('operator -> MUL','operator',1,'p_operator','if.py',73),
  ('conditional_operators -> LT','conditional_operators',1,'p_condition','if.py',76),
  ('conditional_operators -> GT','conditional_operators',1,'p_condition','if.py',77),
  ('conditional_operators -> ASSIGN ASSIGN','conditional_operators',2,'p_condition','if.py',78),
  ('conditional_operators -> LT ASSIGN','conditional_operators',2,'p_condition','if.py',79),
  ('conditional_operators -> GT ASSIGN','conditional_operators',2,'p_condition','if.py',80),
  ('self_assignment_expression -> IDENTIFIER inc_dec_operators','self_assignment_expression',2,'p_self_assignment_expression','if.py',83),
  ('self_assignment_expression -> IDENTIFIER assignment_operators INT_LITERAL','self_assignment_expression',3,'p_self_assignment_expression','if.py',84),
  ('inc_dec_operators -> PLUS PLUS','inc_dec_operators',2,'p_inc_dec_operator','if.py',87),
  ('inc_dec_operators -> MINUS MINUS','inc_dec_operators',2,'p_inc_dec_operator','if.py',88),
  ('assignment_operators -> PLUS ASSIGN','assignment_operators',2,'p_assignment','if.py',91),
  ('assignment_operators -> MINUS ASSIGN','assignment_operators',2,'p_assignment','if.py',92),
  ('assignment_operators -> DIV ASSIGN','assignment_operators',2,'p_assignment','if.py',93),
  ('assignment_operators -> MUL ASSIGN','assignment_operators',2,'p_assignment','if.py',94),
  ('type -> INT','type',1,'p_type','if.py',97),
  ('type -> FLOAT','type',1,'p_type','if.py',98),
]
